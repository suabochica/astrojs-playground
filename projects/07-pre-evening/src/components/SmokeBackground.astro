<div id="smoke-background" class="fixed top-0 -z-10 h-full w-full">
  <canvas id="smoke-canvas" class="opacitiy-70 dark:opacity-40"></canvas>
</div>

<script>
  const NUM_PARTICLES = 56;
  const canvas = document.getElementById('smoke-canvas') as HTMLCanvasElement;
  const context = canvas.getContext('2d') as CanvasRenderingContext2D;

  let raf: number;
  let then = Date.now();

  if (canvas) {
    canvas.width = window.innerWidth;
    canvas.height =  window.innerHeight + 100;
  }

  const particles: Particle[] = [];
  const fps = 30;
  const fpsInterval = 1000 / fps;
  const smokeImage = new Image();
  smokeImage.src = '/smoke.png';

  class Particle {
    x: number
    y: number
    size: number
    opacity: number
    rotation: number
    rotationSpeed: number

    constructor () {
      this.x = Math.random() * canvas.width - canvas.width;
      this.y = Math.random() * canvas.height - canvas.height / 2;
      this.size = Math.random() * 3000 + 1000;
      this.opacity = Math.random() * 0.8;
      this.rotation = Math.random() * Math.PI * 2;
      this.rotationSpeed = Math.random() * 0.02;
    }

    update () {
      this.rotation += this.rotationSpeed;
    }

    draw () {
      context.save();
      context.translate(this.x + this.size / 2, this.y + this.size / 2);
      context.rotate(this.rotation);
      context.globalAlpha = this.opacity;
      context.drawImage(smokeImage, -this.size / 9, -this.size / 2, this.size, this.size)
      context.globalAlpha = 1.0;
      context.restore();
    }
  }

  function init () {
    for (let i = 0; i < NUM_PARTICLES; i++) {
      particles.push(new Particle());
    }
  }

  function handleParticles () {
    for (let i = 0; i < particles.length; i++) {
      particles[i].update();
      particles[i].draw();

      if (particles[i].size <= 1) {
        particles.splice(i, 1);
        i--;
        particles.push(new Particle());
      }
    }
  }

  function animate () {
    raf = requestAnimationFrame(animate);
    const now = Date.now();
    const elapsed = now - then;

    if (elapsed > fpsInterval) {
      then = now - (elapsed % fpsInterval);

      context.clearRect(0, 0, canvas.width, canvas.height);
      handleParticles();
    }
  }

  const reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');

  if (!reducedMotion.matches) {
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight + 100;
      cancelAnimationFrame(raf);
      handleParticles();
      animate();
    })

    smokeImage.onload = () => {
      init();
      animate();
    }
  }
</script>
